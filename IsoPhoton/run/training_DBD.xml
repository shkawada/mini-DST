<?xml version="1.0"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!-- Loading shared library : /Users/olddog/ilcsoft/MarlinReco/v00-17/lib/libMarlinReco.dylib -->
<!-- Loading shared library : /Users/olddog/ilcsoft/PandoraPFA/v03-02/lib/libPandoraPFA.dylib -->
<!-- Loading shared library : /Users/olddog/ilcsoft/LCFIVertex/v00-03/lib/libLCFIVertex.dylib -->
<!-- Loading shared library : /Users/olddog/ilcsoft/CEDViewer/v00-07-01/lib/libCEDViewer.dylib -->
<!-- Loading shared library : /Users/olddog/ilcsoft/Eutelescope/v00-00-07/lib/libEutelescope.dylib -->
<!-- Loading shared library : /Users/olddog/ilcsoft/MarlinTPC/v00-03-01/lib/libMarlinTPC.dylib -->
<!-- Loading shared library : /Users/olddog/ilcsoft/Overlay/v00-07/lib/libOverlay.dylib -->
<!-- Loading shared library : /Users/olddog/ilcsoft/SiliconDigi/v00-04-02/lib/libSiliconDigi.dylib -->
<!-- Loading shared library : /Users/olddog/ilcsoft/CKFit/HEAD/lib/libCKFit.dylib -->
<!--##########################################
    #                                        #
    #     Example steering file for marlin   #
    #                                        #
    ##########################################-->


<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">
  <execute>
   <!--  <processor name="MyAIDAProcessor"/> -->
   <!--  <processor name="MyTestProcessor"/>  -->
 <!-- ========== create a root file =======================================  -->
   <processor name="RootFileProcessor"/>  
   <processor name="InitDD4hep" />
 <!-- ========== lepton selection =======================================  -->
   <Xprocessor name="IsoLepTrainingProcessor"/>  
 <!-- ========== lepton selection =======================================  -->
   <processor name="MyIsoPhotonTrainingProcessor"/>  
 <!-- ========== full and DST output =======================================  -->
<!-- <processor name="MyLCIOOutputProcessor"/> -->
  </execute>

 <global>
  <parameter name="LCIOInputFiles"> 
    <!-- INPUT.slcio -->
  </parameter>
  <!-- limit the number of processed records (run+evt): -->  
  <parameter name="MaxRecordNumber" value="-1" />  
  <parameter name="SkipNEvents" value="0" />  
  <parameter name="SupressCheck" value="false" />  
<!--  <parameter name="GearXMLFile"> gear_ILD_o1_v05.xml </parameter>  -->
  <parameter name="Verbosity" options="DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT"> MESSAGE0  </parameter> 
 </global>

 <processor name="InitDD4hep" type="InitializeDD4hep">
   <!--InitializeDD4hep reads a compact xml file and initializes the DD4hep::LCDD object-->
   <!--Name of the DD4hep compact xml file to load-->
   <parameter name="DD4hepXMLFile" type="string"> /cvmfs/ilc.desy.de/sw/x86_64_gcc82_sl6/v02-01/lcgeo/v00-16-06/ILD/compact/ILD_l5_v02/ILD_l5_v02.xml </parameter>
 </processor>

 <processor name="RootFileProcessor" type="RootFileProcessor">
   <parameter name="OutputRootFile" type="string"> 
    <!-- OUTPUT.root -->
   </parameter>
</processor>

 <processor name="MyIsoPhotonTrainingProcessor" type="IsoPhotonTrainingProcessor">
 <!--IsoPhotonTrainingProcessor does whatever it does ...-->
  <!--Name of the MCParticle collection-->
  <parameter name="InputMCParticlesCollection" type="string" lcioInType="MCParticle">MCParticlesSkimmed </parameter>
  <!--Name of the MCTruthLink collection-->
  <parameter name="InputMCTruthLinkCollection" type="string" lcioInType="LCRelation">RecoMCTruthLink </parameter>
  <!--Name of the PandoraPFOs collection-->
  <parameter name="InputPandoraPFOsCollection" type="string" lcioInType="ReconstructedParticle">PandoraPFOs </parameter>
  <!--set true if you want to check generator information-->
  <parameter name="MCDebugging" type="bool">false </parameter>
  <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
  <!--parameter name="Verbosity" type="string">DEBUG </parameter-->
</processor>

<processor name="IsoLepTrainingProcessor" type="IsoLepTrainingProcessor">
   <parameter name="InputMCParticlesCollection" type="string" lcioInType="MCParticle"> MCParticlesSkimmed </parameter>
   <parameter name="InputMCTruthLinkCollection" type="string" lcioInType="LCRelation"> RecoMCTruthLink </parameter>
   <parameter name="InputPandoraPFOsCollection" type="string" lcioInType="ReconstructedParticle"> PandoraPFOs </parameter>
   <parameter name="IsLepTune" type="bool"> true </parameter>
   <parameter name="MCDebugging" type="bool"> false </parameter>
</processor>

 <processor name="MyLCIOOutputProcessor" type="LCIOOutputProcessor">
 <!--Writes the current event to the specified LCIO outputfile. Needs to be the last ActiveProcessor.-->
  <!--drops the named collections from the event-->
  <!--parameter name="DropCollectionNames" type="StringVec">TPCHits HCalHits  </parameter-->
  <!--drops all collections of the given type from the event-->
  <!--parameter name="DropCollectionTypes" type="StringVec">SimTrackerHit SimCalorimeterHit  </parameter-->
  <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
  <!--parameter name="FullSubsetCollections" type="StringVec">MCParticlesSkimmed  </parameter-->
  <!--force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
  <!--parameter name="KeepCollectionNames" type="StringVec">MyPreciousSimTrackerHits  </parameter-->
  <!-- name of output file -->
  <parameter name="LCIOOutputFile" type="string">
    <!-- OUTPUT.slcio -->
  </parameter>
  <!--write mode for output file:  WRITE_APPEND or WRITE_NEW-->
  <!--  <parameter name="LCIOWriteMode" type="string">None </parameter> -->
  <parameter name="LCIOWriteMode" type="string"> WRITE_NEW </parameter> 
  <!--will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
  <!--parameter name="SplitFileSizekB" type="int">1992294 </parameter-->
 </processor>

</marlin>
